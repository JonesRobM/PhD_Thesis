

@article{ClaudioMFF,
author = {Zeni,Claudio  and Rossi,Kevin  and Glielmo,Aldo  and Fekete,Ádám  and Gaston,Nicola  and Baletto,Francesca  and De Vita,Alessandro },
title = {Building machine learning force fields for nanoclusters},
journal = {The Journal of Chemical Physics},
volume = {148},
number = {24},
year = {2018},
doi = {10.1063/1.5024558}
}

@article{doi:10.1063/1.4811670,
author = {Cortes-Huerto,Robinson  and Goniakowski,Jacek  and Noguera,Claudine },
title = {An efficient many-body potential for the interaction of transition and noble metal nano-objects with an environment},
journal = {The Journal of Chemical Physics},
volume = {138},
number = {24},
pages = {244706},
year = {2013},
doi = {10.1063/1.4811670},

URL = { 
        https://doi.org/10.1063/1.4811670
    
},
eprint = { 
        https://doi.org/10.1063/1.4811670
    
}

}


@Article{Sapphy,
author ="Jones, Robert M. and Rossi, Kevin and Zeni, Claudio and Vanzan, Mirko and Vasiljevic, Igor and Santana-Bonilla, Alejandro and Baletto, Francesca",
title  ="Structural characterisation of nanoalloys for (photo)catalytic applications with the Sapphire library",
journal  ="Faraday Discuss.",
year  ="2022",
pages  ="-",
publisher  ="The Royal Society of Chemistry",
doi  ="10.1039/D2FD00097K",
url  ="http://dx.doi.org/10.1039/D2FD00097K",
abstract  ="A non-trivial interplay rules the relationship between the structure and the chemophysical properties of a nanoparticle. In this context{,} characterization experiments{,} molecular dynamics simulations and electronic structure calculations may allow the variables that determine a given property to be pinpointed. Conversely{,} a rigorous computational characterization of the geometry and chemical ordering of metallic nanoparticles and nanoalloys enables discrimination of which descriptors could be linked with their stability and performance. To this end{,} we introduce a modular and open-source library{,} Sapphire{,} which may classify the structural characteristics of a given nanoparticle through several structural analysis techniques and order parameters. A special focus is geared towards using geometrical descriptors to make predictions on a given nanoparticle{'}s catalytic activity."}


@article{Flare,
author = {Jonathan Vandermause and Torrisi, Steven B. and Simon Batzner and Yu Xie and Sun, Lixin and Kolpak, Alexie M. and Boris Kozinsky},
title = {On-the-fly active learning of interpretable Bayesian force fields for atomistic rare events},
journal = {npj computational materials},
volume = {6},
number = {20},
year = {2020}
}

@misc{LoDiS,
  author = {F. Baletto},
  title = {LoDiS},
  year = {2021},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/kcl-tscm/LoDiS}}
}
@article{Stukowski_2012,
   title={Structure identification methods for atomistic simulations of crystalline materials},
   volume={20},
   DOI={10.1088/0965-0393/20/4/045021},
   number={4},
   journal={Modelling and Simulation in Materials Science and Engineering},
   publisher={IOP Publishing},
   author={Stukowski, Alexander},
   year={2012}
}

@article{ase-paper,
  author={Ask Hjorth Larsen and Jens Jørgen Mortensen and Jakob Blomqvist and Ivano E Castelli and Rune Christensen and Marcin
Dułak and Jesper Friis and Michael N Groves and Bjørk Hammer and Cory Hargus and Eric D Hermes and Paul C Jennings and Peter
Bjerre Jensen and James Kermode and John R Kitchin and Esben Leonhard Kolsbjerg and Joseph Kubal and Kristen
Kaasbjerg and Steen Lysgaard and Jón Bergmann Maronsson and Tristan Maxson and Thomas Olsen and Lars Pastewka and Andrew
Peterson and Carsten Rostgaard and Jakob Schiøtz and Ole Schütt and Mikkel Strange and Kristian S Thygesen and Tejs
Vegge and Lasse Vilhelmsen and Michael Walter and Zhenhua Zeng and Karsten W Jacobsen},
  title={The atomic simulation environment—a Python library for working with atoms},
  journal={Journal of Physics: Condensed Matter},
  volume={29},
  number={27},
  pages={273002},
  url={http://stacks.iop.org/0953-8984/29/i=27/a=273002},
  year={2017},
  abstract={The atomic simulation environment (ASE) is a software package written in the Python programming language with the aim of setting up, steering, and analyzing atomistic simulations. In ASE, tasks are fully scripted in Python. The powerful syntax of Python combined with the NumPy array library make it possible to perform very complex simulation tasks. For example, a sequence of calculations may be performed with the use of a simple ‘for-loop’ construction. Calculations of energy, forces, stresses and other quantities are performed through interfaces to many external electronic structure codes or force fields using a uniform interface. On top of this calculator interface, ASE provides modules for performing many standard simulation tasks such as structure optimization, molecular dynamics, handling of constraints and performing nudged elastic band calculations.}
}



@misc{asap3,
 title = {asap3 software},
 howpublished ={\url{https://gitlab.com/asap/asap}},
}
@article{Fire,
  title = {Structural Relaxation Made Simple},
  author = {Bitzek, Erik and Koskinen, Pekka and G\"ahler, Franz and Moseler, Michael and Gumbsch, Peter},
  journal = {Phys. Rev. Lett.},
  volume = {97},
  issue = {17},
  pages = {170201},
  numpages = {4},
  year = {2006},
  month = {Oct},
  publisher = {American Physical Society},
  doi = {10.1103/PhysRevLett.97.170201},
  url = {https://link.aps.org/doi/10.1103/PhysRevLett.97.170201}
}

@article{Grunewald2022,
abstract = {Molecular dynamics simulations play an increasingly important role in the rational design of (nano)-materials and in the study of biomacromolecules. However, generating input files and realistic starting coordinates for these simulations is a major bottleneck, especially for high throughput protocols and for complex multi-component systems. To eliminate this bottleneck, we present the polyply software suite that provides 1) a multi-scale graph matching algorithm designed to generate parameters quickly and for arbitrarily complex polymeric topologies, and 2) a generic multi-scale random walk protocol capable of setting up complex systems efficiently and independent of the target force-field or model resolution. We benchmark quality and performance of the approach by creating realistic coordinates for polymer melt simulations, single-stranded as well as circular single-stranded DNA. We further demonstrate the power of our approach by setting up a microphase-separated block copolymer system, and by generating a liquid-liquid phase separated system inside a lipid vesicle.},
author = {Gr{\"{u}}newald, Fabian and Alessandri, Riccardo and Kroon, Peter C and Monticelli, Luca and Souza, Paulo C T and Marrink, Siewert J},
doi = {10.1038/s41467-021-27627-4},
issn = {2041-1723},
journal = {Nature Communications},
number = {1},
pages = {68},
title = {{Polyply; a python suite for facilitating simulations of macromolecules and nanomaterials}},
url = {https://doi.org/10.1038/s41467-021-27627-4},
volume = {13},
year = {2022}}

@article{freud2020,
    title = {freud: A Software Suite for High Throughput
             Analysis of Particle Simulation Data},
    author = {Vyas Ramasubramani and
              Bradley D. Dice and
              Eric S. Harper and
              Matthew P. Spellings and
              Joshua A. Anderson and
              Sharon C. Glotzer},
    journal = {Computer Physics Communications},
    volume = {254},
    pages = {107275},
    year = {2020},
    issn = {0010-4655},
    doi = {https://doi.org/10.1016/j.cpc.2020.107275},
    url = {http://www.sciencedirect.com/science/article/pii/S0010465520300916},
    keywords = {Simulation analysis, Molecular dynamics,
                Monte Carlo, Computational materials science},
}


@article{ovito,
Author = {Stukowski, Alexander},
Title = {{Visualization and analysis of atomistic simulation data with OVITO-the
   Open Visualization Tool}},
Journal = {{MODELLING AND SIMULATION IN MATERIALS SCIENCE AND ENGINEERING}},
Year = {{2010}},
Volume = {{18}},
Number = {{1}},
Month = {{JAN}},
DOI = {{10.1088/0965-0393/18/1/015012}},
Article-Number = {{015012}},
ISSN = {{0965-0393}},
EISSN = {{1361-651X}},
ResearcherID-Numbers = {{Stukowski, Alexander/G-9695-2017}},
ORCID-Numbers = {{Stukowski, Alexander/0000-0001-6750-3401}},
Unique-ID = {{ISI:000272791800012}},
}


@article{https://doi.org/10.1002/jcc.21787,
author = {Michaud-Agrawal, Naveen and Denning, Elizabeth J. and Woolf, Thomas B. and Beckstein, Oliver},
title = {MDAnalysis: A toolkit for the analysis of molecular dynamics simulations},
journal = {Journal of Computational Chemistry},
volume = {32},
number = {10},
pages = {2319-2327},
keywords = {molecular dynamics simulations, analysis, proteins, object-oriented design, software, membrane systems, Python programming language},
doi = {https://doi.org/10.1002/jcc.21787},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.21787},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/jcc.21787},
abstract = {Abstract MDAnalysis is an object-oriented library for structural and temporal analysis of molecular dynamics (MD) simulation trajectories and individual protein structures. It is written in the Python language with some performance-critical code in C. It uses the powerful NumPy package to expose trajectory data as fast and efficient NumPy arrays. It has been tested on systems of millions of particles. Many common file formats of simulation packages including CHARMM, Gromacs, Amber, and NAMD and the Protein Data Bank format can be read and written. Atoms can be selected with a syntax similar to CHARMM's powerful selection commands. MDAnalysis enables both novice and experienced programmers to rapidly write their own analytical tools and access data stored in trajectories in an easily accessible manner that facilitates interactive explorative analysis. MDAnalysis has been tested on and works for most Unix-based platforms such as Linux and Mac OS X. It is freely available under the GNU General Public License from http://mdanalysis.googlecode.com. © 2011 Wiley Periodicals, Inc. J Comput Chem 2011},
year = {2011}
}



@InProceedings{ oliver_beckstein-proc-scipy-2016,
  author    = { {R}ichard {J}. {G}owers and {M}ax {L}inke and {J}onathan {B}arnoud and {T}yler {J}. {E}. {R}eddy and {M}anuel {N}. {M}elo and {S}ean {L}. {S}eyler and {J}an {D}omański and {D}avid {L}. {D}otson and {S}ébastien {B}uchoux and {I}an {M}. {K}enney and {O}liver {B}eckstein },
  title     = { {M}{D}{A}nalysis: {A} {P}ython {P}ackage for the {R}apid {A}nalysis of {M}olecular {D}ynamics {S}imulations },
  booktitle = { {P}roceedings of the 15th {P}ython in {S}cience {C}onference },
  pages     = { 98 - 105 },
  year      = { 2016 },
  editor    = { {S}ebastian {B}enthall and {S}cott {R}ostrup },
  doi       = { 10.25080/Majora-629e541a-00e }
}



@article{LeRoux2010,
abstract = {ISAACS (interactive structure analysis of amorphous and crystalline systems) is a cross-platform program developed to analyze the structural characteristics of three-dimensional structure models built by computer simulations. The models may have any degree of periodicity (i.e. crystallinity) and local symmetry. The following structural information is computed from the models: total and partial radial distribution functions and structure factors for X-ray or neutron scattering, coordination numbers, bond-angle and near atomic neighbor distributions, bond-valence sums, ring statistics, and spherical harmonics invariants. The information may be visualized conveniently and stored for further use. {\textcopyright} 2010 International Union of Crystallography Printed in Singapore-all rights reserved.},
author = {{Le Roux}, S{\'{e}}bastien and Petkov, Valeri},
doi = {10.1107/S0021889809051929},
issn = {00218898},
journal = {Journal of Applied Crystallography},
number = {1},
title = {{ISAACS-interactive structure analysis of amorphous and crystalline systems}},
volume = {43},
year = {2010}
}

@article{Roe2013,
abstract = {We describe PTRAJ and its successor CPPTRAJ, two complementary, portable, and freely available computer programs for the analysis and processing of time series of three-dimensional atomic positions (i.e., coordinate trajectories) and the data therein derived. Common tools include the ability to manipulate the data to convert among trajectory formats, process groups of trajectories generated with ensemble methods (e.g., replica exchange molecular dynamics), image with periodic boundary conditions, create average structures, strip subsets of the system, and perform calculations such as RMS fitting, measuring distances, B-factors, radii of gyration, radial distribution functions, and time correlations, among other actions and analyses. Both the PTRAJ and CPPTRAJ programs and source code are freely available under the GNU General Public License version 3 and are currently distributed within the AmberTools 12 suite of support programs that make up part of the Amber package of computer programs (see http://ambermd.org). This overview describes the general design, features, and history of these two programs, as well as algorithmic improvements and new features available in CPPTRAJ. {\textcopyright} 2013 American Chemical Society.},
author = {Roe, Daniel R. and Cheatham, Thomas E.},
doi = {10.1021/ct400341p},
issn = {15499618},
journal = {Journal of Chemical Theory and Computation},
number = {7},
title = {{PTRAJ and CPPTRAJ: Software for processing and analysis of molecular dynamics trajectory data}},
volume = {9},
year = {2013}
}

@inproceedings{Gowers2016,
abstract = {MDAnalysis (http://mdanalysis.org) is a library for structural and temporal analysis of molecular dynamics (MD) simulation trajectories and individual protein structures. MD simulations of biological molecules have become an important tool to elucidate the relationship between molecular structure and physiological function. Simulations are performed with highly optimized software packages on HPC resources but most codes generate output trajectories in their own formats so that the development of new trajectory analysis algorithms is confined to specific user communities and widespread adoption and further development is delayed. MDAnalysis addresses this problem by abstracting access to the raw simulation data and presenting a uniform object-oriented Python interface to the user. It thus enables users to rapidly write code that is portable and immediately usable in virtually all biomolecular simulation communities. The user interface and modular design work equally well in complex scripted work flows, as foundations for other packages, and for interactive and rapid prototyping work in IPython / Jupyter notebooks, especially together with molecular visualization provided by nglview and time series analysis with pandas. MDAnalysis is written in Python and Cython and uses NumPy arrays for easy interoperability with the wider scientific Python ecosystem. It is widely used and forms the foundation for more specialized biomolecular simulation tools. MDAnalysis is available under the GNU General Public License v2.},
author = {Gowers, Richard and Linke, Max and Barnoud, Jonathan and Reddy, Tyler and Melo, Manuel and Seyler, Sean and Doma{\'{n}}ski, Jan and Dotson, David and Buchoux, S{\'{e}}bastien and Kenney, Ian and Beckstein, Oliver},
booktitle = {Proceedings of the 15th Python in Science Conference},
doi = {10.25080/majora-629e541a-00e},
title = {{MDAnalysis: A Python Package for the Rapid Analysis of Molecular Dynamics Simulations}},
year = {2016}
}

@article{Tribello2014,
abstract = {Enhancing sampling and analyzing simulations are central issues in molecular simulation. Recently, we introduced PLUMED, an open-source plug-in that provides some of the most popular molecular dynamics (MD) codes with implementations of a variety of different enhanced sampling algorithms and collective variables (CVs). The rapid changes in this field, in particular new directions in enhanced sampling and dimensionality reduction together with new hardware, require a code that is more flexible and more efficient. We therefore present PLUMED 2 here - a complete rewrite of the code in an object-oriented programming language (C++). This new version introduces greater flexibility and greater modularity, which both extends its core capabilities and makes it far easier to add new methods and CVs. It also has a simpler interface with the MD engines and provides a single software library containing both tools and core facilities. Ultimately, the new code better serves the ever-growing community of users and contributors in coping with the new challenges arising in the field. {\textcopyright} 2013 Elsevier B.V. All rights reserved.},
author = {Tribello, Gareth A. and Bonomi, Massimiliano and Branduardi, Davide and Camilloni, Carlo and Bussi, Giovanni},
doi = {10.1016/j.cpc.2013.09.018},
issn = {00104655},
journal = {Computer Physics Communications},
number = {2},
title = {{PLUMED 2: New feathers for an old bird}},
volume = {185},
year = {2014}
}

@misc{Sapphire,
  author = {R. M. Jones},
  title = {Sapphire},
  year = {2022},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/kcl-tscm/Sapphire.git}}
}

@misc{https://doi.org/10.48550/arxiv.1805.05039,
  doi = {10.48550/ARXIV.1805.05039},
  
  url = {https://arxiv.org/abs/1805.05039},
  
  author = {Draxl, Claudia and Scheffler, Matthias},
  
  keywords = {Materials Science (cond-mat.mtrl-sci), Computational Physics (physics.comp-ph), FOS: Physical sciences, FOS: Physical sciences},
  
  title = {NOMAD: The FAIR Concept for Big-Data-Driven Materials Science},
  
  publisher = {arXiv},
  
  year = {2018},
  
  copyright = {arXiv.org perpetual, non-exclusive license}
}


}

@article{Ghiringhelli2021,
author = {Ghiringhelli, Luca M.},
doi = {10.1038/s42254-021-00373-8},
issn = {25225820},
journal = {Nature Reviews Physics},
number = {11},
title = {{An AI-toolkit to develop and share research into new materials}},
volume = {3},
year = {2021}
}

@article{Karampudi2015,
author={Karampudi, N.B.R. and Bahadur, R. P.}, title={Layers: A molecular surface peeling
algorithm and its applications to analyze protein structures}, 
journal={Sci. Rep.}, volume={5}, 
pages={16141}, 
opturl={doi: 10.1038/srep16141},
year={2015}
}

@article{Hunter:2007,
  Author    = {Hunter, J. D.},
  Title     = {Matplotlib: A 2D graphics environment},
  Journal   = {Computing in Science \& Engineering},
  Volume    = {9},
  Number    = {3},
  Pages     = {90--95},
  abstract  = {Matplotlib is a 2D graphics package used for Python for
  application development, interactive scripting, and publication-quality
  image generation across user interfaces and operating systems.},
  publisher = {IEEE COMPUTER SOC},
  doi       = {10.1109/MCSE.2007.55},
  year      = 2007
}
